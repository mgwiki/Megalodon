* Formalizing 100 Theorems

The subdirectory form100 contains a Megalodon presentation of
12 of the 100 theorems listed here:

http://www.cs.ru.nl/~freek/100/

To check the presentation do this:

megalodon -owned ownedNov222023 form100/100thms_12.mg

* Proofgold bounties

See pfgbounties/README for details about conjectures with Proofgold
bounties on them as of September 2023.

* MetaMath set.mm Translations:

There are two translations of MetaMath's set.mm library (as of the
middle of 2024) as 40558 Megalodon-checkable theorems.

In the SetMM theory, each theorem (each in its own file) is available here:

http://grid01.ciirc.cvut.cz/~chad/setmmmgpfg/setmmmg.tgz

(Note: setmmmg.tgz unzips to about 600MB directory.)

In the Egal theory, each theorem (each in its own file) is available here:

http://grid01.ciirc.cvut.cz/~chad/mmmg.tgz

(Note: mmmg.tgz unzips to a 657MB directory.)


* Mizar Mathematical Library Translation:

A translation of an old snapshot of the Mizar Mathematical Library
is available in Megalodon format (but without proofs) here:

http://grid01.ciirc.cvut.cz/~chad/mmlmg.tgz

(Note: mmlmg.tgz is 266M and unzips to a 2.7 GB directory.)

* HOTG (in Egal Style) Examples:

The default theory supported by Megalodon (as of version 1.3) is HOTG
(Higher Order Tarski-Grothendieck) in Egal style. To compare the Egal
style vs. the Mizar style see Brown and Pak's paper "A Tale of Two Set
Theories" from CICM 2019.

Examples from HOTG (in Egal style) are in the egal,
form100p1, UpToOctonions and pfghotgdocsSep142023 directories.

The pfghotgdocsSep142023 directory contains all (1548) documents published in
the HOTG-Egal theory in Proofgold as of September 14, 2023.
The documents were backported from Proofgold format to Megalodon format.
The proofs were not backported, but simply left as omitted.
More information is in pfghotgdocsSep142023/README.

The subdirectory UpToOctonions contains a full formalization of the
construction of Conway's surreal numbers, an extraction of the real
numbers from the surreal numbers and the Cayley-Dickson construction
yielding surcomplex (including complex) numbers, surquaternions
(including quaternions) and suroctonions (including octonions).  and
complex numbers. The formalization is given in 14 parts: Part1.mg -
Part14.mg. Each Partn.mg file contains a header of some information
from the previous Parti.mg files with i < n. Additionally, Part10b.mg
is an aside proving the square root of 2 is irrational.

The files can be (re)checked as follows:

megalodon -owned ownedNov222023 UpToOctonions/Part1.mg
megalodon -owned ownedNov222023 UpToOctonions/Part2.mg
megalodon -owned ownedNov222023 UpToOctonions/Part3.mg
megalodon -owned ownedNov222023 UpToOctonions/Part4.mg
megalodon -owned ownedNov222023 UpToOctonions/Part5.mg
megalodon -owned ownedNov222023 UpToOctonions/Part6.mg
megalodon -owned ownedNov222023 UpToOctonions/Part7.mg
megalodon -owned ownedNov222023 UpToOctonions/Part8.mg
megalodon -owned ownedNov222023 UpToOctonions/Part9.mg
megalodon -owned ownedNov222023 UpToOctonions/Part10.mg
megalodon -owned ownedNov222023 UpToOctonions/Part10b.mg
megalodon -owned ownedNov222023 UpToOctonions/Part11.mg
megalodon -owned ownedNov222023 UpToOctonions/Part12.mg
megalodon -owned ownedNov222023 UpToOctonions/Part13.mg
megalodon -owned ownedNov222023 UpToOctonions/Part14.mg

Additionally there is a Summary.mgs file that contains the important
objects and propositions from all the parts but no proofs.

megalodon -owned ownedNov222023 UpToOctonions/Summary.mgs

Finally there is a preamble file Nov2021ConjPreamble.mgs
and a file Nov2021ConjsAll.mg containing 23257 automatically generated
conjectures. These conjectures were generated by extracting 
results of the form A1,...,An -> C from several
intermediate subderivations from the proofs in the 9 parts.
Each conjecture results from removing an Ai from the assumption.
The resulting conjecture may or may not be provable.

megalodon -owned ownedNov222023 -I UpToOctonions/Nov2021ConjPreamble.mgs UpToOctonions/Nov2021ConjsAll.mg

There are several kinds of examples in the egal directory.  Some have
to do with Ramsey numbers and are described in more detail here:

http://grid01.ciirc.cvut.cz/~chad/mgpfgramsey.pdf

The file RamseyConjs.mg contains most definitions required to state
a number of conjectures about Ramsey numbers. The only four undefined
objects are In (the membership relation), Power (the power set
operator) Empty (the empty set) and ordsucc (the ordinal successor
operator).  In, Empty and Power are primitives of HOTG (in Egal
style). They are purposefully left undefined.  On the other hand ordsucc
refers to an object that has been previously defined in a document
published in the Proofgold chain.  It is defined using binary union
and singleton, i.e., ordsucc alpha is defined to be alpha :\/: {alpha}.
However, to state this definition we would need to define binunion and
Sing.  Instead we give the Merkle root of the term defining ordsucc.
Technically there are two different Merkle roots -- one for Megalodon
and one for Proofgold. The Merkle roots are declared as follows:

(* Parameter ordsucc "9db634daee7fc36315ddda5f5f694934869921e9c5f55e8b25c91c0a07c5cbec" "65d8837d7b0172ae830bed36c8407fcd41b7d875033d2284eb2df245b42295a6" *)
Parameter ordsucc : set->set.

In order to check that the given Proofgold Merkle root corresponds to
a previously defined object of type set->set, an ownership file must
be given. The file ownedJul112021  contains Merkle roots of all
definitions and theorems published into the Proofgold chain as of
July 11, 2021.  (Those objects and propositions are "owned" by the
publisher of the first document to define the object or prove the
proposition.)  Megalodon warns if a result marked as an axiom has not
yet been proven.  It is an error if a definition is given by a Merkle
root that is not listed in the ownership file. The -owned option
allows the user to give an ownership file.

Here is how to check the file:

megalodon -owned ownedNov222023 egal/RamseyConjs.mg

To obtain the Proofgold document in a form that can be read by the Proofgold
commands readdraft, commitdraft and publishdraft, use the -pfg option
and redirect the standard output as follows:

megalodon -owned ownedNov222023  -pfg egal/RamseyConjs.mg > egal/RamseyConjs.pfg

Each of these conjectures has a corresponding address.  Bounties can
be placed at these addresses which can later be claimed by the first
person to prove the conjectured proposition (or its negation).  A list
of the addresses is in egal/RamseyConjAddresses.  Some of the
conjectured propositions in egal/RamseyConjs.mg are relatively easy,
but 22 are actually open problems in mathematics.

Usually Megalodon files will not be self-contained.  A preamble file
may contain references to previous definitions (either opaquely via a
Merkle root or transparently by explicitly giving the definition) and
previously proven results.  An example of such a file is
egal/PfgEMay2021Preamble.mgs. The -I option allows the user to give a
preamble file.

The following two documents give two proofs that the Ramsey Number
R(3,3) > 5. The first one translates into a Proofgold document that
would be too large to fit into a block. The second one translates
into a Proofgold document that did fit into a block.

megalodon -owned ownedNov222023 -I egal/PfgEMay2021Preamble.mgs egal/Ramsey_3_3_5_orig_toobigpfg.mg

megalodon -owned ownedNov222023 -I egal/PfgEMay2021Preamble.mgs egal/Ramsey_3_3_5.mg

To obtain the Proofgold documents in a form that can be read by the Proofgold
commands readdraft, commitdraft and publishdraft, use the -pfg option
and redirect the standard output. We can produce the Proofgold document
for the first one, although readdraft will warn that the document is too big
to fit into a block. When Megalodon creates the Proofgold file, it only
includes information from the preamble that is required to make the Proofgold
document self-contained.

megalodon -owned ownedNov222023 -I egal/PfgEMay2021Preamble.mgs -pfg egal/Ramsey_3_3_5_orig_toobigpfg.mg > egal/Ramsey_3_3_5_orig_toobigpfg.pfg

megalodon -owned ownedNov222023 -I egal/PfgEMay2021Preamble.mgs -pfg egal/Ramsey_3_3_5.mg > egal/Ramsey_3_3_5.pfg

The following proves R(3,3) <= 6. (Combined with the previous result, we have
R(3,3) = 6, but we do not make this explicit here.)

megalodon -owned ownedNov222023 -I egal/PfgEMay2021Preamble.mgs egal/Ramsey_3_3_6.mg

megalodon -owned ownedNov222023 -I egal/PfgEMay2021Preamble.mgs -pfg egal/Ramsey_3_3_6.mg > egal/Ramsey_3_3_6.pfg

Other Conjectures than the Ramsey problems can be found in
Dieudonne_2_2.mg and QuotientGroupConjs1.mg.

megalodon -owned ownedNov222023 -I egal/PfgEMay2021Preamble.mgs egal/Dieudonne_2_2.mg
megalodon -owned ownedNov222023 -I egal/PfgEMay2021Preamble.mgs egal/QuotientGroupConjs1.mg

The version of egal/Dieudonne_2_2.mg distributed with Megalodon 1.4 had bugs
and is included here as egal/Dieudonne_2_2_buggy.mg.

In the Egal theory, Megalodon can create fof and th0 ATP problems
corresponding to admitted proofs. Here are examples of how to use
it with Dieudonne_2_2_buggy.mg and Dieudonne_2_2.mg.

megalodon -owned ownedNov222023 -fof fofd22buggy -I egal/PfgEMay2021Preamble.mgs egal/Dieudonne_2_2_buggy.mg
megalodon -owned ownedNov222023 -th0 th0d22buggy -I egal/PfgEMay2021Preamble.mgs egal/Dieudonne_2_2_buggy.mg

megalodon -owned ownedNov222023 -fof fofd22 -I egal/PfgEMay2021Preamble.mgs egal/Dieudonne_2_2.mg
megalodon -owned ownedNov222023 -th0 th0d22 -I egal/PfgEMay2021Preamble.mgs egal/Dieudonne_2_2.mg

Two of the bugs in Dieudonne_2_2_buggy.mg were identified using the E automated prover
on one of these files:

eprover --cpu-limit=10 --auto --tstp-format -s fofd22buggy.46.fof.p

# Proof found!
# SZS status ContradictoryAxioms

In some contexts (where there are contradictory local hypotheses),
ContradictoryAxioms can happen, but in general it is suspicious.
In this case it claims to have proven the theorem with the Admitted on line 6.
That theorem is Dieudonne_2_2_5a:

Theorem Dieudonne_2_2_5a: forall n :e omega, forall x y :e R :^: n, (forall i :e n, x i <= y i) -> finseqsum n x <= finseqsum n y.

The only local hypothesis in context is that Rs is a RealsStruct, which
should not lead to a contradiction.

We ask E for the proof:

eprover --cpu-limit=10 --auto --tstp-format -s -p fofd22buggy.46.fof.p

It uses the following axiom of the problem:

fof(c_Dieudonne_5F2_5F2_5F3a, axiom, ![X1]:(c_RealsStruct(X1)=>![X2]:(c_Subq(X2,c_RealsStruct_5Fcarrier(X1))=>(finite(X2)=>?[X3]:(c_In(X3,X2)&![X4]:(c_In(X4,X2)=>c_RealsStruct_5Fleq(X1,X3,X4)))))), file('fofd22buggy.46.fof.p', c_Dieudonne_5F2_5F2_5F3a)).

The name of the axiom corresponds to Dieudonne_2_2_3a:

Theorem Dieudonne_2_2_3a: forall A c= R, finite A -> exists a :e A, forall x :e A, a <= x.

Inspecting this closely, we note that it can be applied to the empty set
(which is finite), yielding the existence of an element of the empty set.
The fixed version in the new Dieudonne_2_2.mg looks as follows:

Theorem Dieudonne_2_2_3a: forall A c= R, A <> 0 -> finite A -> exists a :e A, forall x :e A, a <= x.

E does not prove the corresponding fixed problem (within 10s using --auto).
E has many options users can try, and there are other first-order and higher-order
theorem provers users can try.

eprover --cpu-limit=10 --auto --tstp-format -s -p fofd22.46.fof.p
# SZS status ResourceOut

E can prove four of the problems from the fixed version of Dieudonne_2_2.mg.


Theorem Dieudonne_2_2_7e: forall x y :e R, x <= y -> - y <= - x.
Admitted.

eprover --cpu-limit=10 --auto --tstp-format -s fofd22.67.fof.p

Theorem Dieudonne_2_2_7f: forall x y :e R, - y <= - x -> x <= y.
Admitted.

eprover --cpu-limit=10 --auto --tstp-format -s fofd22.70.fof.p

A user that inspects E's proofs can likely easily write a Megalodon proof
for these two.

The next two E proves using previous admitted results from the file.

Theorem Dieudonne_2_2_13b: forall z :e R, zero < z -> forall x y :e R, x <= y -> x * z <= y * z.
Admitted.

is proven using

Theorem Dieudonne_2_2_11: forall z :e R, zero <= z -> forall x y :e R, x <= y -> x * z <= y * z.

eprover --cpu-limit=10 --auto --tstp-format -s fofd22.117.fof.p
eprover --cpu-limit=10 --auto --tstp-format -s -p fofd22.117.fof.p | grep Dieudonne | grep axiom

Theorem Dieudonne_2_2_13e: forall z :e R, zero < z -> forall x y :e R, x * z < y * z -> x < y.
Admitted.

is proven using

Theorem Dieudonne_2_2_13c: forall z :e R, zero < z -> forall x y :e R, x * z <= y * z -> x <= y.
Admitted.

eprover --cpu-limit=10 --auto --tstp-format -s fofd22.126.fof.p
eprover --cpu-limit=10 --auto --tstp-format -s -p fofd22.126.fof.p | grep Dieudonne | grep axiom

The file Dieudonne_2_2_extras.mg includes two extra relative
conjectures corresponding to these E proofs. A user can prove the
relative results in Megalodon by inspecting the E proofs and
translating the ideas to Megalodon.  Once the relative results are
proven, proving Dieudonne_2_2_11 will easily yield Dieudonne_2_2_13b
and proving Dieudonne_2_2_13c will easily yield Dieudonne_2_2_13e.

Here are two versions of the Collatz conjecture:

megalodon -owned ownedNov222023 -I egal/PfgEAug2022Preamble.mgs egal/Collatz.mg 

* Structures

The struct subdirectory contains structures in Egal style.

* HOTG (in Mizar style) examples:

A description of the Mizar theory can be found at

http://grid01.ciirc.cvut.cz/~chad/pfgmizar.pdf

A few definitions and already proven theorems are in mizar/PfgMizarNov2020Preamble.mgs.

A small document in the Mizar theory is in mizar/MizExample1.mg

Here is how to check it with Megalodon:

megalodon -mizar -owned ownedNov222023 -I mizar/PfgMizarNov2020Preamble.mgs mizar/MizExample1.mg

Here is how to create the corresponding Proofgold document:

megalodon -mizar -owned ownedNov222023 -I mizar/PfgMizarNov2020Preamble.mgs -pfg mizar/MizExample1.mg > mizar/MizExample1.pfg

* HF Examples:

A description of the HF theory can be found at

https://proofgold.org/hohf.html

and at

http://grid01.ciirc.cvut.cz/~chad/pfghf.pdf

Many basic definitions and already proven theorems are in hf/PfgPreambleSep2020.mgs.

The random bounty conjecture in Block 198 of Proofgold (but determined by Block 197)
has the form

forall X :e Empty, ...

so it is easily provable since it has a vacuous quantifier.
A file with a proof is in hf/Random1_197_pos.mg.

Here is how to check it with Megalodon:

megalodon -hf -owned ownedNov222023 -I hf/PfgPreambleSep2020.mgs hf/Random1_197_pos.mg

Here is how to produce the corresponding Proofgold document:

megalodon -hf -owned ownedNov222023 -I hf/PfgPreambleSep2020.mgs -pfg hf/Random1_197_pos.mg > hf/Random1_197_pos.pfg

The random bounty conjecture in Block 26 of Proofgold (but determined by Block 25)
has the form

forall ..., forall q:set -> prop, forall f:set -> set, forall x:set, ... /\ exists _, q (f x).

This clearly is not a theorem since we can take q to be always false.
This idea allows us to prove the negation of the theorem.
Negations of reward bounty conjectures should be proven in the following form:

Theorem <name> : <prop> -> forall p:prop, p.

An example proof is in hf/Random3_25_neg.mg.

Here is how to check it with Megalodon:

megalodon -hf -owned ownedNov222023 -I hf/PfgPreambleSep2020.mgs hf/Random3_25_neg.mg

Here is how to create the corresponding Proofgold document:

megalodon -hf -owned ownedNov222023 -I hf/PfgPreambleSep2020.mgs -pfg hf/Random3_25_neg.mg > hf/Random3_25_neg.pfg

* HOAS examples:

A description of the HOAS theory can be found at

http://grid01.ciirc.cvut.cz/~chad/hoas/pfghoas.pdf

Some basic definitions and already theorems are in hoas/PfgHOASPreamble1.mgs.

** Untyped lambda calculus

The file ULam1.mg make some definitions to encode untyped lambda calculus,
beta reduction and beta equivalence. It also conjectures the existence
of an identity combinator and a fixed point combinator.

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs hoas/ULam1.mg

To get the Proofgold document:

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs -pfg hoas/ULam1.mg > hoas/ULam1.pfg

ULam2.mg resolves the two previous conjectures by proving the existence of
an identity combinator and a fixed point combinator. This depends on
some things from ULam1.mg and PfgHOASULamPreamble.mgs is a mixture of PfgHOASPreamble1.mgs and ULam1.mg.

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASULamPreamble.mgs hoas/ULam2.mg

To get the Proofgold document:

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASULamPreamble.mgs -pfg hoas/ULam2.mg > hoas/ULam2.pfg

** Core Simplicity

The files CoreSimplicity[1-3].mg contain formal versions of BlockStream's
Core Simplicity language with CoreSimplicity[1-2].mgs being the signature versions
of the first two files to include when checking the next ones.

CoreSimplicity1.mg defines types, terms, the typing relation ("of")
and proves a number of basic properties.

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs hoas/CoreSimplicity1.mg

To get the Proofgold document:

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs -pfg hoas/CoreSimplicity1.mg > hoas/CoreSimplicity1.pfg

CoreSimplicity2.mg gives a semantics for types and a big step semantics.
This diverges a bit from O'Connor's denotational semantics since
the function type (set -> set) does not contain all functional relations,
so instead of mapping terms to functions of type (set -> set)
we essentially map terms to relations (set -> set -> prop) relating
inputs to outputs (i.e., the graph of the intended function).
The file contains two conjectures:

. ev_sound : soundness of evaluation
. ExSwap : For every type A there is a term t of type (A + A) |- (A + A) that "swaps" left and right.

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs -I hoas/CoreSimplicity1.mgs hoas/CoreSimplicity2.mg

To get the Proofgold document:

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs -I hoas/CoreSimplicity1.mgs -pfg hoas/CoreSimplicity2.mg > hoas/CoreSimplicity2.pfg

CoreSimplicity3.mg resolves the previous two conjectures.

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs -I hoas/CoreSimplicity1.mgs -I hoas/CoreSimplicity2.mgs hoas/CoreSimplicity3.mg

To get the Proofgold document:

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs -I hoas/CoreSimplicity1.mgs -I hoas/CoreSimplicity2.mgs -pfg hoas/CoreSimplicity3.mg > hoas/CoreSimplicity3.pfg

** Dedukti

Dedukti.mg contains the building blocks for Dedukti's logical framework.
The signature file DeduktiPreamble.mgs contains the basic
infrastructure needed for future Dedukti files.

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs hoas/Dedukti.mg

To get the Proofgold document:

megalodon -hoas -owned ownedNov222023 -I hoas/PfgHOASPreamble1.mgs -pfg hoas/Dedukti.mg > hoas/Dedukti.pfg

sttfa.mg corresponds to the Dedukti sttfa from Matita's simple type theory library,
with proofs of type correctness left as conjectures.
The signature file sttfa.mgs can be included in order to handle later files
that depend on sttfa.

megalodon -hoas -owned ownedNov222023 -I hoas/DeduktiPreamble.mgs hoas/sttfa.mg

To get the Proofgold document:

megalodon -hoas -owned ownedNov222023 -I hoas/DeduktiPreamble.mgs -pfg hoas/sttfa.mg > hoas/sttfa.pfg

sttfa2.mg proves one of the conjectures from sttfa.mg as an example.

megalodon -hoas -owned ownedNov222023 -I hoas/DeduktiPreamble.mgs -I hoas/sttfa.mgs hoas/sttfa2.mg

To get the Proofgold document:

megalodon -hoas -owned ownedNov222023 -I hoas/DeduktiPreamble.mgs -I hoas/sttfa.mgs -pfg hoas/sttfa2.mg > hoas/sttfa2.pfg

connectives.mg corresponds to the Dedukti connectives file from Matita's simple type theory library,
with proofs of type correctness left as conjectures. It depends on sttfa.

megalodon -hoas -owned ownedNov222023 -I hoas/DeduktiPreamble.mgs -I hoas/sttfa.mgs hoas/connectives.mgxo

To get the Proofgold document:

megalodon -hoas -owned ownedNov222023 -I hoas/DeduktiPreamble.mgs -I hoas/sttfa.mgs -pfg hoas/connectives.mg > hoas/connectives.pfg
